<template name="getOpenVenues" xmlns="http://ws.apache.org/ns/synapse">

    <!-- Required Parameters -->
    <parameter name="key" description="API key"/>

    <!-- At least one of the required parameter must be supplied with the request-->
    <parameter name="city" description="To retrieve results based on city"/>
    <parameter name="country" description="To retrieve results based on country"/>
    <parameter name="group_urlname"
               description="Returns venues with location relative to the group associated with this urlname"/>
    <parameter name="lat" description="To retrieve results based on lat"/>
    <parameter name="lon" description="To retrieve results based on lon"/>
    <parameter name="state" description="To retrieve results based on state"/>
    <parameter name="text" description="To retrieve results based on text"/>
    <parameter name="zip" description="To retrieve results based on zip"/>

    <!-- Optional Parameters -->
    <parameter name="fields" description="To retrieve results based on fields"/>
    <parameter name="radius" description="To retrieve results based on radius"/>


    <sequence>
        <property name="uri.var.key" expression="$func:key"/>
        <property name="uri.var.city" expression="$func:city"/>
        <property name="uri.var.country" expression="$func:country"/>
        <property name="uri.var.fields" expression="$func:fields"/>
        <property name="uri.var.group_urlname" expression="$func:group_urlname"/>
        <property name="uri.var.lat" expression="$func:lat"/>
        <property name="uri.var.lon" expression="$func:lon"/>
        <property name="uri.var.radius" expression="$func:radius"/>
        <property name="uri.var.state" expression="$func:state"/>
        <property name="uri.var.text" expression="$func:text"/>
        <property name="uri.var.zip" expression="$func:zip"/>
        <property name="uri.var.query" value=""/>


        <script language="js">
            <![CDATA[


			var city = mc.getProperty('uri.var.city');
			var country = mc.getProperty('uri.var.country');
			var fields = mc.getProperty('uri.var.fields');
			var group_urlname = mc.getProperty('uri.var.group_urlname');
			var lat = mc.getProperty('uri.var.lat');
			var lon = mc.getProperty('uri.var.lon');
			var radius = mc.getProperty('uri.var.radius');
			var state = mc.getProperty('uri.var.state');
			var text = mc.getProperty('uri.var.text');
			var zip = mc.getProperty('uri.var.zip');
			var query = mc.getProperty('uri.var.query');


			if(city !=null && city != "") {
			    var encoded_city= encodeURIComponent(mc.getProperty('uri.var.city'));
				query = query + '&city=' + encoded_city;
			}

			if (country != null && country != "") {
			    var encoded_country = encodeURIComponent(mc.getProperty('uri.var.country'));
				query = query + '&country=' + encoded_country;
			}

			if (fields != null && fields != "") {
			    var encoded_fields = encodeURIComponent(mc.getProperty('uri.var.fields'));
				query = query + '&fields=' + encoded_fields;
			}

            if (group_urlname != null && group_urlname != "") {
			    var encoded_group_urlname = encodeURIComponent(mc.getProperty('uri.var.group_urlname'));
				query = query + '&group_urlname=' + encoded_group_urlname;
			}

			if(lat != null && lat != "") {
				var lat_category = encodeURIComponent(mc.getProperty('uri.var.lat'));
				query = query + '&lat=' + lat_category;
			}


            if (lon != null && lon != "") {
                var encoded_lon = encodeURIComponent(mc.getProperty('uri.var.lon'));
				query = query + '&lon=' + encoded_lon;
			}

			if (radius != null && radius != "") {
			    var encoded_radius = encodeURIComponent(mc.getProperty('uri.var.radius'));
				query = query + '&radius=' + encoded_radius;
			}

			if(state !=null && state != "") {
			    var encoded_state = encodeURIComponent(mc.getProperty('uri.var.state'));
				query = query + '&state=' + encoded_state;
			}


			if (text != null && text != "") {
			    var encoded_text = encodeURIComponent(mc.getProperty('uri.var.text'));
				query = query + '&text=' + encoded_text;
			}

			if (zip != null && zip != "") {
			    var encoded_zip = encodeURIComponent(mc.getProperty('uri.var.zip'));
				query = query + '&zip=' + encoded_zip;
			}

			mc.setProperty('uri.var.query', query);

	 		]]>
        </script>


        <filter
                xpath="get-property('uri.var.key') = '' or not(string(get-property('uri.var.key')))">
            <then>
                <property name="uri.var.key" value=""/>
            </then>
        </filter>


        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('key - ', get-property('uri.var.key'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('query - ', get-property('uri.var.query'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('apiUrl - ', get-property('uri.var.apiUrl'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('apiVersion - ', get-property('uri.var.apiVersion'))"/>
        </log>


        <call>
            <endpoint>
                <http method="get"
                      uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/open_venues?key={uri.var.key}{uri.var.query}"/>
            </endpoint>
        </call>


        <!-- Remove response custom header information -->
        <header name="x-li-format" scope="transport" action="remove"/>
        <header name="X-LI-UUID" scope="transport" action="remove"/>
        <header name="X-Li-Pop" scope="transport" action="remove"/>
        <header name="X-Li-Fabric" scope="transport" action="remove"/>
        <header name="x-li-request-id" scope="transport" action="remove"/>
    </sequence>
</template>