<template name="getRecommendedVenues" xmlns="http://ws.apache.org/ns/synapse">

    <!-- Required Parameters -->
    <parameter name="key" description="API key"/>

    <!-- Optional Parameters -->
    <parameter name="category" description="To retrieve results based on category"/>
    <parameter name="country" description="To retrieve results based on country"/>
    <parameter name="group_id" description="To retrieve results based on group id"/>
    <parameter name="group_urlname"
               description="Returns venues with location relative to the group associated with this urlname"/>
    <parameter name="lat" description="To retrieve results based on lat"/>
    <parameter name="location" description="To retrieve results based on location"/>
    <parameter name="lon" description="To retrieve results based on lon"/>
    <parameter name="min_groups" description="To retrieve results based on min groups"/>
    <parameter name="radius" description="To retrieve results based on radius"/>
    <parameter name="used_between" description="Return venues that have been used within the given time range"/>
    <parameter name="zip" description="To retrieve results based on zip"/>

    <sequence>
        <property name="uri.var.key" expression="$func:key"/>
        <property name="uri.var.category" expression="$func:category"/>
        <property name="uri.var.country" expression="$func:country"/>
        <property name="uri.var.group_id" expression="$func:group_id"/>
        <property name="uri.var.group_urlname" expression="$func:group_urlname"/>
        <property name="uri.var.lat" expression="$func:lat"/>
        <property name="uri.var.location" expression="$func:location"/>
        <property name="uri.var.lon" expression="$func:lon"/>
        <property name="uri.var.min_groups" expression="$func:min_groups"/>
        <property name="uri.var.radius" expression="$func:radius"/>
        <property name="uri.var.used_between" expression="$func:used_between"/>
        <property name="uri.var.zip" expression="$func:zip"/>
        <property name="uri.var.query" value=""/>


        <script language="js">
            <![CDATA[

			    var category = mc.getProperty('uri.var.category');
			    var city = mc.getProperty('uri.var.city');
			    var country = mc.getProperty('uri.var.country');
			    var group_id = mc.getProperty('uri.var.group_id');
			    var group_urlname = mc.getProperty('uri.var.group_urlname');
			    var lat = mc.getProperty('uri.var.lat');
                var location = mc.getProperty('uri.var.location');
			    var lon = mc.getProperty('uri.var.lon');
			    var radius = mc.getProperty('uri.var.radius');
    			var min_groups = mc.getProperty('uri.var.min_groups');
	    		var used_between = mc.getProperty('uri.var.used_between');
			    var zip = mc.getProperty('uri.var.zip');
			    var query = mc.getProperty('uri.var.query');


			if (category != null && category != "") {
			    var encoded_category = encodeURIComponent(mc.getProperty('uri.var.category'));
				query = query + '&category=' + encoded_category;
			}


			if (country != null && country != "") {
			    var encoded_country = encodeURIComponent(mc.getProperty('uri.var.country'));
				query = query + '&country=' + encoded_country;
			}

			if (group_id != null && group_id != "") {
			    var encoded_group_id = encodeURIComponent(mc.getProperty('uri.var.group_id'));
				query = query + '&group_id=' + encoded_group_id;
			}

			if (group_urlname != null && group_urlname != "") {
			    var encoded_group_urlname = encodeURIComponent(mc.getProperty('uri.var.group_urlname'));
				query = query + '&group_urlname=' + encoded_group_urlname;
			}

			if(lat != null && lat != "") {
				var lat_category = encodeURIComponent(mc.getProperty('uri.var.lat'));
				query = query + '&lat=' + lat_category;
			}

			if (location != null && location != "") {
			    var encoded_location = encodeURIComponent(mc.getProperty('uri.var.location'));
				query = query + '&location=' + encoded_location;
			}

            if (lon != null && lon != "") {
                var encoded_lon = encodeURIComponent(mc.getProperty('uri.var.lon'));
				query = query + '&lon=' + encoded_lon;
			}

			if (radius != null && radius != "") {
			    var encoded_radius = encodeURIComponent(mc.getProperty('uri.var.radius'));
				query = query + '&radius=' + encoded_radius;
			}

			if(min_groups !=null && min_groups != "") {
			    var encoded_min_groups = encodeURIComponent(mc.getProperty('uri.var.min_groups'));
				query = query + '&min_groups=' + encoded_min_groups;
			}

			if (used_between != null && used_between != "") {
			    var encoded_used_between = encodeURIComponent(mc.getProperty('uri.var.used_between'));
				query = query + '&used_between=' + encoded_used_between;
			}

	    	if (zip != null && zip != "") {
			    var encoded_zip = encodeURIComponent(mc.getProperty('uri.var.zip'));
				query = query + '&zip=' + encoded_zip;
			}

			mc.setProperty('uri.var.query', query);

	 		]]>
        </script>


        <filter
                xpath="get-property('uri.var.key') = '' or not(string(get-property('uri.var.key')))">
            <then>
                <property name="uri.var.key" value=""/>
            </then>
        </filter>


        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('key - ', get-property('uri.var.key'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('query2 - ', get-property('uri.var.query'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('apiUrl - ', get-property('uri.var.apiUrl'))"/>
        </log>
        <log level="custom" xmlns="http://ws.apache.org/ns/synapse">
            <property name="string" expression="fn:concat('apiVersion - ', get-property('uri.var.apiVersion'))"/>
        </log>


        <call>
            <endpoint>
                <http method="get"
                      uri-template="{uri.var.apiUrl}/recommended/venues?key={uri.var.key}{uri.var.query}"/>
            </endpoint>
        </call>


        <!-- Remove response custom header information -->
        <header name="x-li-format" scope="transport" action="remove"/>
        <header name="X-LI-UUID" scope="transport" action="remove"/>
        <header name="X-Li-Pop" scope="transport" action="remove"/>
        <header name="X-Li-Fabric" scope="transport" action="remove"/>
        <header name="x-li-request-id" scope="transport" action="remove"/>
    </sequence>
</template>